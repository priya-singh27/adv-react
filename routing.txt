‚ùì How can we use 'react-router-dom' for routing purpose?

<BrowserRouter> (The Manager) ‚û°Ô∏è

    Creates and manages the history object 

    Provides routing context (like location, navigate) to all child components via React Context.

    Listens to URL changes (e.g., back/forward button clicks) and updates the location.

<Routes> (The Matcher) ‚û°Ô∏è

    Watches the location.pathname (from context).

    Iterates through its child <Route> components to find the first matching path.

‚ùì What is a location object?
location object provides information about URL and also provides some APIs to manipulate it.

‚û°Ô∏è location.state: Used to pass info across pages
‚û°Ô∏è location.hash: used to navigate user on the current page
‚û°Ô∏è location.search: used to get query parameters eg: ?name=Priya&age=22

‚û°Ô∏è If you just add up the three you'll get the URL the user sees in the browser:
location.pathname + location.search + location.hash; Eg: /bbq/pig-pickins?campaign=instagram#menu

‚ùì How do you make sure header and footer stays consistently on each page?

We can use <Outlet/> that renders element if it matches path of the location..
Eg:
import {Outlet} from 'react-router-dom'
export default function Header(){
    return (
        <>
            <h1>This is header page</h1>
            <Outlet/>
        </>
    )
}

‚ùì What is primary reason to use a nested route?

Whenever we have some shared UI between routes in our app.

‚ùì What is a "Layout Route"?

It's the parent route of some nested routes that contains the portion of the 
UI that will be shared, it will use <Outlet/> to render it's children that matches 
the path.

‚ùì What is an "index route"?

It's the "default route" we want to render when the path of the parent route matches.
Eg: <Route path="/" element={<Header/>}>
        <Route index element={<Home/>}/>
        <Route path="/about" element={<About/>}/>
    </Route> 

‚ùì If you want to pass data to the nested child routes, how do we do that?

Suppose out routing structure looks like this:
<BrowserRouter>
  <Routes>
    <Route path="vans/:id" element={ <HostVanDetail/> }>
        <Route index element={<HostVanInfo />}/>
        <Route path="pricing" element={<HostVanPricing />} />
        <Route path="photos" element={<HostVanPhotos />} />
    </Route>
  </Routes>
</BrowserRouter>

In HostVanDetail:

return  (
        <section>
            <Link
                to=".."
                relative="path"
                className="back-button"
            >&larr; <span>Back to all vans</span></Link>

            <nav className="host-van-detail-nav">
                <NavLink
                    to="."
                    end
                    style={({ isActive }) => isActive ? activeStyles : null}
                >
                    Details
                </NavLink>
                <NavLink
                    to="pricing"
                    style={({ isActive }) => isActive ? activeStyles : null}
                >
                    Pricing
                </NavLink>
                <NavLink
                    to="photos"
                    style={({ isActive }) => isActive ? activeStyles : null}
                >
                    Photos
                </NavLink>
            </nav>

            <Outlet context={{currentVan}}/>

        </section>
    )

To use it in HostVanPhotos:

import {useOutletContext} from 'react-router-dom'

export default function HostVanPhotos(){
    const {currentVan} = useOutletContext();
    return(
        <img src={currentVan.photos}/>
    )
}

You will be able to access currentVan in all the child Route

‚ùì What is useParams and useSearchParams?

import {useParams, useSearchParams} from 'react-router-dom'

with useParams: you can get path parameters
Eg: https:mywebsite.com/vans/1
 
1 is a van-id part of a dynamic route /vans/:id 
when you write const {id} = useParams() you get that same vaiable value

with useSearchParams: you can get query/search parameters
Eg: https:mywebsite.com/vans?id=1
const [searchParams] = useSearchParams();
const vanId = searchParams.get('id')

‚ùì How to set search params in url?

import {Link, useSearchParams} from 'react-router-dom'

1Ô∏è‚É£
<Link to="?type=simple">Simple</Link> 
<Link to="">Clear</Link> 

when clicked it will update the url with search params

2Ô∏è‚É£
const [searchParams, setSearchParams] = useSearchParams();
<button onClick=(()=> setSearchParams({type: "simple"}))>Simple</button>
<button onClick=(()=> setSearchParams({}))>Clear</button>

‚ùì How do you append search params?

If you are using button
function genNewSearchParamString(key, value) {
    const sp = new URLSearchParams(searchParams)
    if (value === null) {
      sp.delete(key)
    } else {
      sp.set(key, value)
    }
    return `?${sp.toString()}`
}
  
If you are using <Link> and setSearchParams 
function handleFilterChange(key, value) {
    setSearchParams(prevParams => {
        if (value === null) {
        prevParams.delete(key)
        } else {
        prevParams.set(key, value)
        }
        return prevParams
    })
}

‚ùì How do we go back to the previous page?

Eg: <Link to=".." relative="path" className="back-button">
        &larr; <span>Back to all vans</span>
    </Link>

to='..' takes you back one level in route hierarchy
relative=This modifier changes the behavior so that .. works relative to the URL path hierarchy 

‚ùì How can we pass state from one page to another?

we can pass it via state prop of Link element
<Link state = {{search: searchParams}}> Get State </Link>

Then on next page you can use useLocation hook

const location = useLocation()
const search = location.state?.search || ""


----------------------üçÑüçÑüçÑ----------------------
/*
*
PROTECTED ROUTE
*
*/

‚ùì What happens if you define <Route element={<Auth/>}> without a path 

if you define a <Route> without a path, but with an element, it works like a layout/wrapper component.
This wrapper will always render when any child route (nested inside it) matches.

‚ùì What component can we use to automatically send someone
   to a different route in our app?

<Navigate to="/login" />

‚ùì What component can we render if the user IS logged in?

<Outlet />



