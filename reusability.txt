(1) If we have:
    <Button>This is a button</Button>
    Now to access this text in Button component you need to write: props.children

    eg: function Button(props){
        return(
            <button>{props.children}</button>
        )
    }

(2) For icons go to this site : https://react-icons.github.io/react-icons

(3) Prop Drilling : Passing props down to the child components through multiple levels of component tree, even though many intermediate components in between are not at all using these props

(4) What is Compound components?
Components that work together to accomplish a greater objective than using a single component alone. 
Some examples of html elements that work together to add functionality or styling are: <ul> & <li>, <select> & <option>, <table> & all the other table elements

(5) How can compound components help you avoid having to drill props multiple levels down?

Compound component "flatten" the heirarchy that I would otherwise need to pass props through.
Since I need to provide the children to render, the parent-most component has direct access 
to those "grandchild" components, to which it can pass whatever props it needs to pass directly.

Eg:

function App() {
  const sports = ["Tennis", "Pickleball", "Racquetball", "Squash"]
  
  return (
    <Menu>
      <MenuButton>Sports</MenuButton>
      <MenuDropdown items={sports} />
    </Menu>
  )
}

Earlier MenuDropdown was receiving prop called items that was array of sport.
I move the array from being passed as a prop and stored it in a variable, 
then within the opening and closing tag of MenuDropdown I am mapping through each
sport of sports array, I created another component called MenuItem and pass each 
sport as children to this component. Now in MenuItem I am taking this children and 
rendering it. another change is now MenuDropdown is not receiving items array it 
is receiving all MenuItem as children and I render children inside MenuDropdown.

(6) What problem does React.Children solve?

Children lets us manipulate the children prop.

eg: Children.map(children, curr_child =>{
  <div>
    {curr_child}
  </div>
});

If you want to pass some props defined in current component to the JSX tag you received:
eg: App(){
  return(
    <Menu>
      <Header/>
      <Body/>
      <Footer/>
    </Menu>
  )
}

Menu({children}){
  const [isLoading, setIsLoading] = useState(false);
  return(
    <div>
      {React.Children.map(children, (child)=>{
        return React.cloneElement(child, {
          isLoading
        })
      })}
    </div>
  )
}

üóíÔ∏è: React.cloneElement(element, props, ...children) : Create a  react element based on the element, but with different props and children

(7) Why React.Children is not reliable option for passing props down in the tree?

Becuase with React.Children you can pass the props to the immediate child only; so it is fragile because if a component is just wrapped in a  
div for styling purpose now that componnent is no longer receiving any props.

(7) Context and State?

Context: Context have the job of passing values down to the children or grand-children in the tree

State: State is charge of updating the value and triggering re-renders inside of react

(8) Compound component with dot syntax?
./Menu
  ‚Ü™Ô∏è Menu.js
  ‚Ü™Ô∏è MenuButton.js
  ‚Ü™Ô∏è MenuDropdown.js
  ‚Ü™Ô∏è index.js
      ```  
        import Menu from './Menu'
        import MenuButton from './Menu'
        import MenuDropdown from './Menu'

        Menu.Button = MenuButton
        Menu.MenuDropdown = MenuDropdown

        export default Menu
        
      ```
    
  Now you don't need to import MenuDropdown or MenuButton, you can write
  import Menu

  <Menu>
    <Menu.Button></Menu.Button>
    <Menu.Dropdown></Menu.Dropdown>
  </Menu> 


